from aiogram import Router, types
from src.models.models import rooms, admins
from aiogram.fsm.context import FSMContext
import re

router = Router()

@router.message(lambda message: re.fullmatch(r"\d{3}", message.text))
async def join_room(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    room_number = message.text

    for existing_room, details in rooms.items():
        if details['admin'] == user_id:
            await message.reply("‚ùå –í–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–ª–∏ –∫—ñ–º–Ω–∞—Ç—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —ñ–Ω—à–æ—ó!")
            return

    user_data = await state.get_data()
    if 'room_number' in user_data and user_data['room_number'] in rooms:
        await message.reply("‚ùå –í–∏ –≤–∂–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ —ñ–Ω—à—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –Ω–æ–≤–æ—ó!")
        return

    if room_number not in rooms:
        await message.reply("‚ùå –¢–∞–∫–æ—ó –∫—ñ–º–Ω–∞—Ç–∏ –Ω–µ —ñ—Å–Ω—É—î!")
        return

    if rooms[room_number]['closed']:
        await message.reply("üö™ –ö—ñ–º–Ω–∞—Ç–∞ –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–∞, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è.")
        return

    if user_id in rooms[room_number]['users']:
        await message.reply("‚Ñπ –í–∏ –≤–∂–µ –≤ —Ü—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ!")
        return

    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∫—ñ–º–Ω–∞—Ç—É
    rooms[room_number]['users'].append(user_id)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–º–µ—Ä –∫—ñ–º–Ω–∞—Ç–∏ —É —Å—Ç–∞–Ω
    await state.update_data(room_number=room_number)

    await message.reply(f"‚úÖ –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ {room_number}!")

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_id = rooms[room_number]['admin']
    await message.bot.send_message(admin_id, f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ {room_number}.")

@router.message()
async def handle_user_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()
    room_number = user_data.get('room_number')

    if not room_number or room_number not in rooms:
        await message.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∂–æ–¥–Ω—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ!")
        return

    if user_id not in rooms[room_number]['users']:
        await message.answer("‚ùå –í–∏ –Ω–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º —Ü—ñ—î—ó –∫—ñ–º–Ω–∞—Ç–∏!")
        return

    if not rooms[room_number]['closed']:
        await message.answer("üîí –î–∏–∫—Ç–∞–Ω—Ç —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–≤—Å—è! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –∫—ñ–º–Ω–∞—Ç–∏.")
        return

    if rooms[room_number]['finished']:
        await message.answer("‚èπ –î–∏–∫—Ç–∞–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤–∏ –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤—ñ—Ä—à—ñ.")
        return

    if user_id in rooms[room_number]['submissions']:
        await message.answer("‚ö† –í–∞—à –≤—ñ—Ä—à –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ, –∑–∞—á–µ–∫–∞–π—Ç–µ.")
        return

    temp_message = await message.reply(f"üìù –í–∞—à –≤—ñ—Ä—à:\n\n{message.text}")
    rooms[room_number]['submissions'][user_id] = message.text
    await message.bot.edit_message_text(
        text="üîí –í—ñ—Ä—à –ø—Ä–∏–π–Ω—è—Ç–æ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.",
        chat_id=message.chat.id,
        message_id=temp_message.message_id
    )

    admin_id = rooms[room_number]['admin']
    await message.bot.send_message(
        admin_id,
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.full_name} –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –≤—ñ—Ä—à —É –∫—ñ–º–Ω–∞—Ç—ñ {room_number}:\n\n{message.text}"
    )